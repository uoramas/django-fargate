---

AWSTemplateFormatVersion: '2010-09-09'

Description: AWS CloudFormation template for infrastructure of django-test project


Parameters:
  ProjectName:
    Type: String
    Default: "django-test"
  VpcAvailabilityZones:
    Type: CommaDelimitedList
    Description: 'Comma-delimited list of two VPC availability zones in which to create subnets'
    Default: 'eu-west-1a,eu-west-1b'
  VpcCidrBlock:
    Type: String
    Description: "CIDR/IP range for the VPC"
    Default: 10.0.0.0/16
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
  SubnetCidrBlock1:
    Type: String
    Description: "CIDR/IP range for the 1st subnet"
    Default: 10.0.0.0/24
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
  SubnetCidrBlock2:
    Type: String
    Description: "CIDR/IP range for the 2nd subnet"
    Default: 10.0.1.0/24
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'


Resources:
  DjangoTestVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref 'VpcCidrBlock'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        -
          Key: 'ProjectName'
          Value: !Join [' ', [!Ref 'ProjectName', '-', 'vpc']]

  DjangoTestPublicSubnetAz1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'DjangoTestVpc'
      CidrBlock: !Ref 'SubnetCidrBlock1'
      AvailabilityZone: !Select ['0', !Ref 'VpcAvailabilityZones']
      Tags:
        -
          Key: 'ProjectName'
          Value: !Join [' ', [!Ref 'ProjectName', '-', 'subnet-1']]

  DjangoTestPublicSubnetAz2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref 'DjangoTestVpc'
      CidrBlock: !Ref 'SubnetCidrBlock2'
      AvailabilityZone: !Select ['1', !Ref 'VpcAvailabilityZones']
      Tags:
        -
          Key: 'ProjectName'
          Value: !Join [' ', [!Ref 'ProjectName', '-', 'subnet-2']]

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'DjangoTestVpc'
      InternetGatewayId: !Ref 'InternetGateway'

  RouteViaIgw:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'DjangoTestVpc'

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref 'RouteViaIgw'
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref 'InternetGateway'

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DjangoTestPublicSubnetAz1'
      RouteTableId: !Ref 'RouteViaIgw'

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref 'DjangoTestPublicSubnetAz2'
      RouteTableId: !Ref 'RouteViaIgw'

  DjangoTestCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref ProjectName, "cluster"]]


Outputs:
  DjangoTestVpc:
    Value: !Ref "DjangoTestVpc"
    Export:
      Name: !Sub "${AWS::StackName}-vpc"

  DjangoTestPublicSubnetAz1:
    Value: !Ref "DjangoTestPublicSubnetAz1"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAz1"

  DjangoTestPublicSubnetAz2:
    Value: !Ref "DjangoTestPublicSubnetAz2"
    Export:
      Name: !Sub "${AWS::StackName}-SubnetAz2"

  DjangoTestCluster:
    Value: !Ref "DjangoTestCluster"
